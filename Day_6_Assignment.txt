Question 1:

Write a function to find the maximum element in the stack.

CODE:

#include <bits/stdc++.h>
using namespace std;


struct MyStack {
    stack<int> s;
    int max_El;


    void getMax()
    {
        if (s.empty())
            cout << "Stack is empty\n";



        else
            cout << "Maximum Element in the stack is: "
                 << max_El << "\n";
    }


    void peek()
    {
        if (s.empty()) {
            cout << "Stack is empty ";
            return;
        }

        int t = s.top();

        cout << "Top Most Element is: ";



        (t > max_El) ? cout << max_El : cout << t;
    }


    void pop()
    {
        if (s.empty()) {
            cout << "Stack is empty\n";
            return;
        }

        cout << "Top Most Element Removed: ";
        int t = s.top();
        s.pop();



        if (t > max_El) {
            cout << max_El << "\n";
            max_El = 2 * max_El - t;
        }

        else
            cout << t << "\n";
    }


    void push(int x)
    {

        if (s.empty()) {
            max_El = x;
            s.push(x);
            cout << "Number Inserted: " << x << "\n";
            return;
        }


        if (x > max_El) {
            s.push(2 * x - max_El);
            max_El = x;
        }

        else
            s.push(x);

        cout << "Number Inserted: " << x << "\n";
    }
};


int main()
{
    MyStack s;
    s.push(3);
    s.push(15);
    s.push(7);
    s.push(9);
    s.getMax();
    s.push(20);
    s.getMax();
    s.pop();
    s.getMax();

    return 0;
}




Question 2:

Write a function to find the minimum element in the stack.

CODE :

#include <bits/stdc++.h>
using namespace std;

struct MyStack
{
    stack<int> s;
    int min_El;


    void getMin()
    {
        if (s.empty())
            cout << "Stack is empty\n";


        else
            cout <<"Minimum Element in the stack is: "
                 << min_El << "\n";
    }


    void peek()
    {
        if (s.empty())
        {
            cout << "Stack is empty ";
            return;
        }

        int t = s.top();

        cout << "Top Most Element is: ";


        (t < min_El)? cout << min_El: cout << t;
    }


    void pop()
    {
        if (s.empty())
        {
            cout << "Stack is empty\n";
            return;
        }

        cout << "Top Most Element Removed: ";
        int t = s.top();
        s.pop();


        if (t < min_El)
        {
            cout << min_El << "\n";
            min_El = 2*min_El - t;
        }

        else
            cout << t << "\n";
    }


    void push(int x)
    {

        if (s.empty())
        {
            min_El = x;
            s.push(x);
            cout <<  "Number Inserted: " << x << "\n";
            return;
        }


        if (x < min_El)
        {
            s.push(2*x - min_El);
            min_El= x;
        }

        else
           s.push(x);

        cout <<  "Number Inserted: " << x << "\n";
    }
};


int main()
{
    MyStack s;
    s.push(3);
    s.push(5);
    s.getMin();
    s.push(2);
    s.push(1);
    s.getMin();
    s.pop();
    s.getMin();
    s.pop();
    s.peek();

    return 0;
}


